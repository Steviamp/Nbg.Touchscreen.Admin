@page "/login"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-10">
    <MudPaper Class="pa-6">
        <MudText Typo="Typo.h5" GutterBottom>Sign in</MudText>

        <MudTextField @bind-Value="_email" Label="Email" Required="true" />
        <MudTextField @bind-Value="_password" Label="Password" Required="true" InputType="InputType.Password" />

        <MudButton Class="mt-4" Variant="Variant.Filled" Disabled="@isBusy" OnClick="HandleLogin">LOGIN</MudButton>
        <MudText Color="Color.Error">@_error</MudText>
    </MudPaper>
</MudContainer>

@code {
    private string _email = "";
    private string _password = "";
    private string? _error;
    private bool isBusy;


    protected override void OnInitialized()
    {
        if (Http.BaseAddress is null)
            Http.BaseAddress = new Uri(Nav.BaseUri);
    }

    private async Task HandleLogin()
    {
        try
        {
            isBusy = true; StateHasChanged();

            var resp = await Http.PostAsJsonAsync("/auth/login", new { Email = _email, Password = _password });

            if (resp.IsSuccessStatusCode)
            {
                Snackbar.Add("Signed in.", Severity.Success);
                Nav.NavigateTo("/", forceLoad: true);
            }
            else
            {
                _error = "Invalid credentials.";
            }
        }
        catch (Exception ex)
        {
            _error = "Login error: " + ex.Message;
        }
        finally
        {
            isBusy = false; StateHasChanged();
        }
    }
}
