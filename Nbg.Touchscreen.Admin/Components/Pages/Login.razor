@rendermode InteractiveServer
@page "/login"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@inject Nbg.Touchscreen.Admin.Data.AppDbContext Db
@inject NavigationManager Nav
@inject IHttpContextAccessor Http

<PageTitle>Login</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-10">
    <MudPaper Class="pa-6">
        <MudText Typo="Typo.h5" GutterBottom>Sign in</MudText>

        <MudForm @ref="_form" OnValidSubmit="HandleLogin">
            <MudTextField @bind-Value="_email" Label="Email" Required="true" />
            <MudTextField @bind-Value="_password" Label="Password" Required="true" InputType="InputType.Password" />
            <MudButton Type="Submit" Variant="Variant.Filled" Class="mt-4">Login</MudButton>
            <MudText Color="Color.Error">@_error</MudText>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private string _email = "";
    private string _password = "";
    private string? _error;

    private async Task HandleLogin()
    {
        var user = await Db.Users
          .FirstOrDefaultAsync(u => u.Email == _email && u.Password == _password && u.IsActive);

        if (user is null)
        {
            _error = "Invalid credentials.";
            return;
        }

        var claims = new List<Claim>
    {
      new Claim(ClaimTypes.Name, string.IsNullOrWhiteSpace(user.Name) ? user.Email : user.Name),
      new Claim(ClaimTypes.Email, user.Email),
      new Claim(ClaimTypes.Role, user.Role ?? "Viewer")
    };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await Http.HttpContext!.SignInAsync(
          CookieAuthenticationDefaults.AuthenticationScheme,
          principal);

        Nav.NavigateTo("/", true);
    }
}
